#include <bits/stdc++.h>

using namespace std;

using ll = long long;
using vi = vector<int>;
using vvi = vector<vector<int>>;
using vl = vector<ll>;
using vvl = vector<vector<ll>>;
using pi = pair<int, int>;
using pl = pair<ll, ll>;
using ld = long double;

#define all(x) begin(x), end(x)
#define rall(x) rbegin(x), rend(x)
#define PB push_back
#define MP make_pair
#define F first
#define S second
#define endl '\n'
#define forn(i, n) for(ll i = 0; i < n; i++)
#define fora(i, a, n) for(ll i = a; i < n; i++)
#define readi(e) int e; cin >> e
#define readl(e) ll e; cin >> e
#define reads(e) string e; cin >> e
#define T int tt; cin >> tt; while(tt--)


template<typename U>
void print(U arr) {
	for(auto element: arr) {
		cout << element << " ";
	}
	cout << endl;
}

// read and write into files, rather than standard i/o
void setup(string s) {
	freopen((s+".in").c_str(), "r", stdin);
	freopen((s+".out").c_str(), "w", stdout);
}

const int M = 1e9+7;
const int N = 1000000;

ll pow(int a,int b){
  int ans = 1;
  while(b){
    if(b&1){
      ans = (ans*a)%M;
    }
    a = (a*a)%M;
  }
  return ans;
}

bool arr[9000001];







bool possible(vector<int>& pos,vector<int>& vec,double mid){
   int l = pos[0] - vec[0]*mid;
   int r = pos[0] + vec[0]*mid;
   for(int i = 1;i<pos.size();i++){
     int lc = pos[i] - vec[i]*mid;
     int rc = pos[i] + vec[i]*mid;
     l = max(lc,l);
     r = min(rc,r);
     if(l>r){
       return false;
     }
   }
   return true;
}

int ask(int l,int r){
  cout<<"? "<<l<<" "<<r<<endl;
  int ans;
  cin>>ans;
  return ans-1;
}




int solve(){
    int n;
    cin>>n;
    vector<int> outdegree(n+1,0);
    int x,y;
    for(int i = 1;i<n;i++){
        cin>>x>>y;
        outdegree[x]++;
    }
    
    int answer = -1;
    for(int i = 1;i<=n;i++){
      if(outdegree[i] == 0 && answer != -1){
        answer = -1;
        break;
      }
      if(outdegree[i] == 0){
        answer = i;
      }
    }
    cout<<answer<<endl;
    return 0;
  }
  



int main()
{ 
  // int t;
  // cin>>t;
  // while(t--){
    solve();
  // }
 
  }
